<?php

namespace GetWith\CoffeeMachine\Tests\Unit\Console;

use GetWith\CoffeeMachine\Drink\ApplicationService\DTO\OrderDrinkRequest;
use GetWith\CoffeeMachine\Drink\ApplicationService\OrderDrink;
use GetWith\CoffeeMachine\Drink\Domain\Exception\AmountSugarIsNotBetweenZeroAndTwo;
use GetWith\CoffeeMachine\Drink\Domain\Exception\DrinkTypeInvalid;
use GetWith\CoffeeMachine\Drink\Domain\Exception\PriceIsNotEnough;
use GetWith\CoffeeMachine\Drink\Domain\ValueObject\Money;
use PHPUnit\Framework\TestCase;

class MakeDrinkCommandTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function shouldOrderedAChocolateWith1SugarsAndStickIncluded()
    {
        $orderDrink = new OrderDrink();
        $orderDrinkResponse = $orderDrink(
            new OrderDrinkRequest(
                'chocolate',
                0.7,
                1,
                false
            )
        );

        $this->assertEquals("You have ordered a chocolate with 1 sugars (stick included)", $orderDrinkResponse->orderMessage());
    }

    /**
     * @test
     */
    public function shouldOrderedATeaExtraHot()
    {
        $orderDrink = new OrderDrink();
        $orderDrinkResponse = $orderDrink(
            new OrderDrinkRequest(
                'tea',
                0.4,
                0,
                true
            )
        );

        $this->assertEquals('You have ordered a tea extra hot', $orderDrinkResponse->orderMessage());
    }

    /**
     * @test
     */
    public function shouldOrderedACoffeeExtraHotWith2SugarsAndStickIncluded()
    {
        $orderDrink = new OrderDrink();
        $orderDrinkResponse = $orderDrink(
            new OrderDrinkRequest(
                'coffee',
                2,
                2,
                true
            )
        );

        $this->assertEquals('You have ordered a coffee extra hot with 2 sugars (stick included)', $orderDrinkResponse->orderMessage());
    }

    /**
     * @test
     */
    public function shouldThrowExceptionDrinkTypeInvalidMessage()
    {
        $this->expectException(DrinkTypeInvalid::class);

        $orderDrink = new OrderDrink();
        $orderDrinkResponse = $orderDrink(
            new OrderDrinkRequest(
                'orange juice',
                2,
                2,
                true
            )
        );
    }

    /**
     * @test
     */
    public function shouldThrowExceptionSugarAmountIsNotBetween0And2()
    {
        $this->expectException(AmountSugarIsNotBetweenZeroAndTwo::class);

        $orderDrink = new OrderDrink();
        $orderDrinkResponse = $orderDrink(
            new OrderDrinkRequest(
                'chocolate',
                2,
                4,
                true
            )
        );
    }

    /**
     * @test
     */
    public function shouldThrowExceptionPriceIsNotEnough()
    {
        $this->expectException(PriceIsNotEnough::class);

        $orderDrink = new OrderDrink();
        $orderDrinkResponse = $orderDrink(
            new OrderDrinkRequest(
                'chocolate',
                Money::CHOCOLATE_PRICE - 0.1,
                2,
                true
            )
        );
    }
}
